{
  "version": 3,
  "sources": ["../../../../../../../../node_modules/inline-worker/index.js", "../../../../../../../../node_modules/recorder-js/lib/microphone.js", "../../../../../../../../node_modules/recorder-js/lib/index.js", "../../../../../../../../node_modules/recorder-js/index.js"],
  "sourcesContent": ["var WORKER_ENABLED = !!(global === global.window && global.URL && global.Blob && global.Worker);\n\nfunction InlineWorker(func, self) {\n  var _this = this;\n  var functionBody;\n\n  self = self || {};\n\n  if (WORKER_ENABLED) {\n    functionBody = func.toString().trim().match(\n      /^function\\s*\\w*\\s*\\([\\w\\s,]*\\)\\s*{([\\w\\W]*?)}$/\n    )[1];\n\n    return new global.Worker(global.URL.createObjectURL(\n      new global.Blob([ functionBody ], { type: \"text/javascript\" })\n    ));\n  }\n\n  function postMessage(data) {\n    setTimeout(function() {\n      _this.onmessage({ data: data });\n    }, 0);\n  }\n\n  this.self = self;\n  this.self.postMessage = postMessage;\n\n  setTimeout(func.bind(self, self), 0);\n}\n\nInlineWorker.prototype.postMessage = function postMessage(data) {\n  var _this = this;\n\n  setTimeout(function() {\n    _this.self.onmessage({ data: data });\n  }, 0);\n};\n\nmodule.exports = InlineWorker;\n", "'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* eslint-disable */\n/**\n * License (MIT)\n *\n * Copyright Â© 2013 Matt Diamond\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n *\n */\n\n\nvar _inlineWorker = require('inline-worker');\n\nvar _inlineWorker2 = _interopRequireDefault(_inlineWorker);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar defaultConfig = {\n  bufferLen: 4096,\n  numChannels: 2,\n  mimeType: 'audio/wav'\n};\n\nvar Microphone = function () {\n  function Microphone(source, config) {\n    var _this = this;\n\n    _classCallCheck(this, Microphone);\n\n    this.config = Object.assign({}, defaultConfig, config);\n\n    this.recording = false;\n\n    this.callbacks = {\n      getBuffer: [],\n      exportWAV: []\n    };\n\n    this.context = source.context;\n    this.node = (this.context.createScriptProcessor || this.context.createJavaScriptNode).call(this.context, this.config.bufferLen, this.config.numChannels, this.config.numChannels);\n\n    this.node.onaudioprocess = function (e) {\n      if (!_this.recording) return;\n\n      var buffer = [];\n      for (var channel = 0; channel < _this.config.numChannels; channel++) {\n        buffer.push(e.inputBuffer.getChannelData(channel));\n      }\n      _this.worker.postMessage({\n        command: 'record',\n        buffer: buffer\n      });\n    };\n\n    source.connect(this.node);\n    this.node.connect(this.context.destination); //this should not be necessary\n\n    var self = {};\n    this.worker = new _inlineWorker2.default(function () {\n      var recLength = 0,\n          recBuffers = [],\n          sampleRate = void 0,\n          numChannels = void 0;\n\n      this.onmessage = function (e) {\n        switch (e.data.command) {\n          case 'init':\n            init(e.data.config);\n            break;\n          case 'record':\n            record(e.data.buffer);\n            break;\n          case 'exportWAV':\n            exportWAV(e.data.type);\n            break;\n          case 'getBuffer':\n            getBuffer();\n            break;\n          case 'clear':\n            clear();\n            break;\n        }\n      };\n\n      function init(config) {\n        sampleRate = config.sampleRate;\n        numChannels = config.numChannels;\n        initBuffers();\n      }\n\n      function record(inputBuffer) {\n        for (var channel = 0; channel < numChannels; channel++) {\n          recBuffers[channel].push(inputBuffer[channel]);\n        }\n        recLength += inputBuffer[0].length;\n      }\n\n      function exportWAV(type) {\n        var buffers = [];\n        for (var channel = 0; channel < numChannels; channel++) {\n          buffers.push(mergeBuffers(recBuffers[channel], recLength));\n        }\n        var interleaved = void 0;\n        if (numChannels === 2) {\n          interleaved = interleave(buffers[0], buffers[1]);\n        } else {\n          interleaved = buffers[0];\n        }\n        var dataview = encodeWAV(interleaved);\n        var audioBlob = new Blob([dataview], { type: type });\n\n        this.postMessage({ command: 'exportWAV', data: audioBlob });\n      }\n\n      function getBuffer() {\n        var buffers = [];\n        for (var channel = 0; channel < numChannels; channel++) {\n          buffers.push(mergeBuffers(recBuffers[channel], recLength));\n        }\n        this.postMessage({ command: 'getBuffer', data: buffers });\n      }\n\n      function clear() {\n        recLength = 0;\n        recBuffers = [];\n        initBuffers();\n      }\n\n      function initBuffers() {\n        for (var channel = 0; channel < numChannels; channel++) {\n          recBuffers[channel] = [];\n        }\n      }\n\n      function mergeBuffers(recBuffers, recLength) {\n        var result = new Float32Array(recLength);\n        var offset = 0;\n        for (var i = 0; i < recBuffers.length; i++) {\n          result.set(recBuffers[i], offset);\n          offset += recBuffers[i].length;\n        }\n        return result;\n      }\n\n      function interleave(inputL, inputR) {\n        var length = inputL.length + inputR.length;\n        var result = new Float32Array(length);\n\n        var index = 0,\n            inputIndex = 0;\n\n        while (index < length) {\n          result[index++] = inputL[inputIndex];\n          result[index++] = inputR[inputIndex];\n          inputIndex++;\n        }\n        return result;\n      }\n\n      function floatTo16BitPCM(output, offset, input) {\n        for (var i = 0; i < input.length; i++, offset += 2) {\n          var s = Math.max(-1, Math.min(1, input[i]));\n          output.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7FFF, true);\n        }\n      }\n\n      function writeString(view, offset, string) {\n        for (var i = 0; i < string.length; i += 1) {\n          view.setUint8(offset + i, string.charCodeAt(i));\n        }\n      }\n\n      function encodeWAV(samples) {\n        var buffer = new ArrayBuffer(44 + samples.length * 2);\n        var view = new DataView(buffer);\n\n        /* RIFF identifier */\n        writeString(view, 0, 'RIFF');\n        /* RIFF chunk length */\n        view.setUint32(4, 36 + samples.length * 2, true);\n        /* RIFF type */\n        writeString(view, 8, 'WAVE');\n        /* format chunk identifier */\n        writeString(view, 12, 'fmt ');\n        /* format chunk length */\n        view.setUint32(16, 16, true);\n        /* sample format (raw) */\n        view.setUint16(20, 1, true);\n        /* channel count */\n        view.setUint16(22, numChannels, true);\n        /* sample rate */\n        view.setUint32(24, sampleRate, true);\n        /* byte rate (sample rate * block align) */\n        view.setUint32(28, sampleRate * 4, true);\n        /* block align (channel count * bytes per sample) */\n        view.setUint16(32, numChannels * 2, true);\n        /* bits per sample */\n        view.setUint16(34, 16, true);\n        /* data chunk identifier */\n        writeString(view, 36, 'data');\n        /* data chunk length */\n        view.setUint32(40, samples.length * 2, true);\n\n        floatTo16BitPCM(view, 44, samples);\n\n        return view;\n      }\n    }, self);\n\n    this.worker.postMessage({\n      command: 'init',\n      config: {\n        sampleRate: this.context.sampleRate,\n        numChannels: this.config.numChannels\n      }\n    });\n\n    this.worker.onmessage = function (e) {\n      var cb = _this.callbacks[e.data.command].pop();\n      if (typeof cb === 'function') {\n        cb(e.data.data);\n      }\n    };\n  }\n\n  _createClass(Microphone, [{\n    key: 'record',\n    value: function record() {\n      this.recording = true;\n    }\n  }, {\n    key: 'stop',\n    value: function stop() {\n      this.recording = false;\n    }\n  }, {\n    key: 'clear',\n    value: function clear() {\n      this.worker.postMessage({ command: 'clear' });\n    }\n  }, {\n    key: 'getBuffer',\n    value: function getBuffer(cb) {\n      cb = cb || this.config.callback;\n\n      if (!cb) throw new Error('Callback not set');\n\n      this.callbacks.getBuffer.push(cb);\n\n      this.worker.postMessage({ command: 'getBuffer' });\n    }\n  }, {\n    key: 'exportWAV',\n    value: function exportWAV(cb, mimeType) {\n      mimeType = mimeType || this.config.mimeType;\n      cb = cb || this.config.callback;\n\n      if (!cb) throw new Error('Callback not set');\n\n      this.callbacks.exportWAV.push(cb);\n\n      this.worker.postMessage({\n        command: 'exportWAV',\n        type: mimeType\n      });\n    }\n  }]);\n\n  return Microphone;\n}();\n\nMicrophone.forceDownload = function forceDownload(blob, filename) {\n  var a = document.createElement('a');\n\n  a.style = 'display: none';\n  document.body.appendChild(a);\n\n  var url = window.URL.createObjectURL(blob);\n\n  a.href = url;\n  a.download = filename;\n  a.click();\n\n  window.URL.revokeObjectURL(url);\n\n  document.body.removeChild(a);\n};\n\nexports.default = Microphone;", "'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _microphone = require('./microphone');\n\nvar _microphone2 = _interopRequireDefault(_microphone);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar defaultConfig = {\n  nFrequencyBars: 255,\n  onAnalysed: null\n};\n\nvar Recorder = function () {\n  function Recorder(audioContext) {\n    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Recorder);\n\n    this.config = Object.assign({}, defaultConfig, config);\n\n    this.audioContext = audioContext;\n    this.audioInput = null;\n    this.realAudioInput = null;\n    this.inputPoint = null;\n    this.audioRecorder = null;\n    this.rafID = null;\n    this.analyserContext = null;\n    this.recIndex = 0;\n    this.stream = null;\n\n    this.updateAnalysers = this.updateAnalysers.bind(this);\n  }\n\n  _createClass(Recorder, [{\n    key: 'init',\n    value: function init(stream) {\n      var _this = this;\n\n      return new Promise(function (resolve) {\n        _this.inputPoint = _this.audioContext.createGain();\n\n        _this.stream = stream;\n\n        _this.realAudioInput = _this.audioContext.createMediaStreamSource(stream);\n        _this.audioInput = _this.realAudioInput;\n        _this.audioInput.connect(_this.inputPoint);\n\n        _this.analyserNode = _this.audioContext.createAnalyser();\n        _this.analyserNode.fftSize = 2048;\n        _this.inputPoint.connect(_this.analyserNode);\n\n        _this.audioRecorder = new _microphone2.default(_this.inputPoint);\n\n        var zeroGain = _this.audioContext.createGain();\n        zeroGain.gain.value = 0.0;\n\n        _this.inputPoint.connect(zeroGain);\n        zeroGain.connect(_this.audioContext.destination);\n\n        _this.updateAnalysers();\n\n        resolve();\n      });\n    }\n  }, {\n    key: 'start',\n    value: function start() {\n      var _this2 = this;\n\n      return new Promise(function (resolve, reject) {\n        if (!_this2.audioRecorder) {\n          reject('Not currently recording');\n          return;\n        }\n\n        _this2.audioRecorder.clear();\n        _this2.audioRecorder.record();\n\n        resolve(_this2.stream);\n      });\n    }\n  }, {\n    key: 'stop',\n    value: function stop() {\n      var _this3 = this;\n\n      return new Promise(function (resolve) {\n        _this3.audioRecorder.stop();\n\n        _this3.audioRecorder.getBuffer(function (buffer) {\n          _this3.audioRecorder.exportWAV(function (blob) {\n            return resolve({ buffer: buffer, blob: blob });\n          });\n        });\n      });\n    }\n  }, {\n    key: 'updateAnalysers',\n    value: function updateAnalysers() {\n      if (this.config.onAnalysed) {\n        requestAnimationFrame(this.updateAnalysers);\n\n        var freqByteData = new Uint8Array(this.analyserNode.frequencyBinCount);\n\n        this.analyserNode.getByteFrequencyData(freqByteData);\n\n        var data = new Array(255);\n        var lastNonZero = 0;\n        var datum = void 0;\n\n        for (var idx = 0; idx < 255; idx += 1) {\n          datum = Math.floor(freqByteData[idx]) - Math.floor(freqByteData[idx]) % 5;\n\n          if (datum !== 0) {\n            lastNonZero = idx;\n          }\n\n          data[idx] = datum;\n        }\n\n        this.config.onAnalysed({ data: data, lineTo: lastNonZero });\n      }\n    }\n  }, {\n    key: 'setOnAnalysed',\n    value: function setOnAnalysed(handler) {\n      this.config.onAnalysed = handler;\n    }\n  }]);\n\n  return Recorder;\n}();\n\nRecorder.download = function download(blob) {\n  var filename = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'audio';\n\n  _microphone2.default.forceDownload(blob, filename + '.wav');\n};\n\nexports.default = Recorder;", "module.exports = require('./lib/index.js');\n"],
  "mappings": "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",
  "names": ["Microphone", "config", "recBuffers", "recLength", "Recorder"]
}
